# -*- coding: utf-8 -*-
"""P04 converted

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RrVphMGVTtjtbAc1a3B9HMadcWTN5KjZ
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load data from the Excel sheet
data = pd.read_excel('MergedDataFinal.xlsx')  # Update the filename as needed

# Remove rows with missing values in the 'Class' column
data = data.dropna(subset=['Class'])

# Split the data into training, validation, and test sets, ensuring 25% from each class
X_train, X_temp, y_train, y_temp = train_test_split(data[['AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'MagX', 'MagY', 'MagZ']],
                                                    data['Class'], test_size=0.75, stratify=data['Class'], random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, stratify=y_temp, random_state=42)

# Encode class labels to numerical values using LabelEncoder
label_encoder = LabelEncoder()
y_train = label_encoder.fit_transform(y_train)
y_val = label_encoder.transform(y_val)
y_test = label_encoder.transform(y_test)

# Define a Deep Neural Network (DNN) model with no activation functions
model_no_activation = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(9,)),  # Input shape to accept data from all three sensors
    tf.keras.layers.Dense(64, kernel_regularizer=tf.keras.regularizers.l2(0.01)),
    tf.keras.layers.Dense(128, kernel_regularizer=tf.keras.regularizers.l2(0.01)),
    tf.keras.layers.Dense(len(label_encoder.classes_), activation='softmax')
])

# Compile the model
model_no_activation.compile(optimizer='adam',
                            loss='sparse_categorical_crossentropy',
                            metrics=['accuracy'])

# Train the model
history_no_activation = model_no_activation.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val))

# Evaluate the model on the test data
test_loss, test_accuracy = model_no_activation.evaluate(X_test, y_test)
print("Test Performance:")
print(f"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}")

# Plot training, validation, and test loss
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history_no_activation.history['loss'], label='Training Loss')
plt.plot(history_no_activation.history['val_loss'], label='Validation Loss')
plt.axhline(y=test_loss, color='r', linestyle='--', label='Test Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training, Validation, and Test Loss')
plt.legend()

# Plot training, validation, and test accuracy
plt.subplot(1, 2, 2)
plt.plot(history_no_activation.history['accuracy'], label='Training Accuracy')
plt.plot(history_no_activation.history['val_accuracy'], label='Validation Accuracy')
plt.axhline(y=test_accuracy, color='r', linestyle='--', label='Test Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training, Validation, and Test Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

import tensorflow as tf

# Convert the model to TensorFlow Lite
converter = tf.lite.TFLiteConverter.from_keras_model(model_no_activation)
tflite_model = converter.convert()

# Save the TensorFlow Lite model to a file
with open("model.tflite", "wb") as f:
    f.write(tflite_model)